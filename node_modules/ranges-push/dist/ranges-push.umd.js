/**
 * @name ranges-push
 * @fileoverview Gather string index ranges
 * @version 7.0.6
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/ranges-push/}
 */

"use strict";var rangesPush=(()=>{var y=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var V=Object.getOwnPropertyNames,O=Object.getOwnPropertySymbols;var D=Object.prototype.hasOwnProperty,I=Object.prototype.propertyIsEnumerable;var b=(n,s,o)=>s in n?y(n,s,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[s]=o,p=(n,s)=>{for(var o in s||(s={}))D.call(s,o)&&b(n,o,s[o]);if(O)for(var o of O(s))I.call(s,o)&&b(n,o,s[o]);return n};var j=(n,s)=>{for(var o in s)y(n,o,{get:s[o],enumerable:!0})},F=(n,s,o,r)=>{if(s&&typeof s=="object"||typeof s=="function")for(let l of V(s))!D.call(n,l)&&l!==o&&y(n,l,{get:()=>s[l],enumerable:!(r=C(s,l))||r.enumerable});return n};var J=n=>F(y({},"__esModule",{value:!0}),n);var R=(n,s,o)=>(b(n,typeof s!="symbol"?s+"":s,o),o);var k={};j(k,{Ranges:()=>E,defaults:()=>N,version:()=>_});function $(n,s=1){let o="\xA0";function r(e){return Array.from(e).reverse().join("")}function l(e,u,i){let a=i?`
`:"\r",t=i?"\r":`
`;if(!e)return e;let A=0,d=0,h="";for(let g=0,x=e.length;g<x;g++)(e[g]===a||e[g]===t&&e[g-1]!==a)&&d++,`\r
`.includes(e[g])||e[g]===o?(A=0,e[g]===o?h+=e[g]:e[g]===a?d<=u&&(h+=e[g],e[g+1]===t&&(h+=e[g+1],g++)):e[g]===t&&(e==null?void 0:e[g-1])!==a&&d<=u&&(h+=e[g])):(A++,!e[g+1]&&!d&&(h+=" "));return h}if(typeof n=="string"&&n.length){let e=1;typeof+s=="number"&&Number.isInteger(+s)&&+s>=0&&(e=+s);let u="",i="";if(!n.trim())u=n;else if(!n[0].trim()){for(let a=0,t=n.length;a<t;a++)if(n[a].trim()){u=n.slice(0,a);break}}if(n.trim()&&(n.slice(-1).trim()===""||n.slice(-1)===o)){for(let a=n.length;a--;)if(n[a].trim()){i=n.slice(a+1);break}}return`${l(u,e,!1)}${n.trim()}${r(l(r(i),e,!0))}`}return n}function f(n){return typeof n=="string"}function c(n){return Number.isSafeInteger(n)&&n>=0}function m(n){return n!=null}var L={strictlyTwoElementsInRangeArrays:!1,progressFn:null};function T(n,s){if(!Array.isArray(n)||!n.length)return n;let o=p(p({},L),s),r,l;if(o.strictlyTwoElementsInRangeArrays&&!n.every((i,a)=>!Array.isArray(i)||i.length!==2?(r=a,l=i.length,!1):!0))throw new TypeError(`ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, ${r}th range (${JSON.stringify(n[r],null,4)}) has not two but ${l} elements!`);if(!n.every((i,a)=>!Array.isArray(i)||!Number.isInteger(i[0])||i[0]<0||!Number.isInteger(i[1])||i[1]<0?(r=a,!1):!0))throw new TypeError(`ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, ${r}th range (${JSON.stringify(n[r],null,4)}) does not consist of only natural numbers!`);let e=n.length**2,u=0;return Array.from(n).sort((i,a)=>(o.progressFn&&(u+=1,o.progressFn(Math.floor(u*100/e))),i[0]===a[0]?i[1]<a[1]?-1:i[1]>a[1]?1:0:i[0]<a[0]?-1:1))}var w="7.0.6";var S={mergeType:1,progressFn:null,joinRangesThatTouchEdges:!0};function v(n,s){function o(t){return!!t&&typeof t=="object"&&!Array.isArray(t)}if(!Array.isArray(n)||!n.length)return null;let r;if(s)if(o(s)){if(r=p(p({},S),s),r.progressFn&&o(r.progressFn)&&!Object.keys(r.progressFn).length)r.progressFn=null;else if(r.progressFn&&typeof r.progressFn!="function")throw new Error(`ranges-merge: [THROW_ID_01] resolvedOpts.progressFn must be a function! It was given of a type: "${typeof r.progressFn}", equal to ${JSON.stringify(r.progressFn,null,4)}`);if(![1,2,"1","2"].includes(r.mergeType))throw new Error(`ranges-merge: [THROW_ID_02] resolvedOpts.mergeType was customised to a wrong thing! It was given of a type: "${typeof r.mergeType}", equal to ${JSON.stringify(r.mergeType,null,4)}`);if(typeof r.joinRangesThatTouchEdges!="boolean")throw new Error(`ranges-merge: [THROW_ID_04] resolvedOpts.joinRangesThatTouchEdges was customised to a wrong thing! It was given of a type: "${typeof r.joinRangesThatTouchEdges}", equal to ${JSON.stringify(r.joinRangesThatTouchEdges,null,4)}`)}else throw new Error(`emlint: [THROW_ID_03] the second input argument must be a plain object. It was given as:
${JSON.stringify(s,null,4)} (type ${typeof s})`);else r=p({},S);let l=n.filter(t=>Array.isArray(t)).map(t=>[...t]).filter(t=>t[2]!==void 0||t[0]!==t[1]),e,u,i;r.progressFn?e=T(l,{progressFn:t=>{i=Math.floor(t/5),i!==u&&(u=i,r.progressFn(i))}}):e=T(l);let a=e.length-1;for(let t=a;t>0;t--)r.progressFn&&(i=Math.floor((1-t/a)*78)+21,i!==u&&i>u&&(u=i,r.progressFn(i))),(e[t][0]<=e[t-1][0]||!r.joinRangesThatTouchEdges&&e[t][0]<e[t-1][1]||r.joinRangesThatTouchEdges&&e[t][0]<=e[t-1][1])&&(e[t-1][0]=Math.min(e[t][0],e[t-1][0]),e[t-1][1]=Math.max(e[t][1],e[t-1][1]),e[t][2]!==void 0&&(e[t-1][0]>=e[t][0]||e[t-1][1]<=e[t][1])&&e[t-1][2]!==null&&(e[t][2]===null&&e[t-1][2]!==null?e[t-1][2]=null:e[t-1][2]!=null?+r.mergeType==2&&e[t-1][0]===e[t][0]?e[t-1][2]=e[t][2]:e[t-1][2]+=e[t][2]:e[t-1][2]=e[t][2]),e.splice(t,1),t=e.length);return e.length?e:null}var _=w,N={limitToBeAddedWhitespace:!1,limitLinebreaksCount:1,mergeType:1},E=class{constructor(s){R(this,"ranges");R(this,"opts");let o=p(p({},N),s);if(o.mergeType&&o.mergeType!==1&&o.mergeType!==2)if(f(o.mergeType)&&o.mergeType.trim()==="1")o.mergeType=1;else if(f(o.mergeType)&&o.mergeType.trim()==="2")o.mergeType=2;else throw new Error(`ranges-push: [THROW_ID_02] opts.mergeType was customised to a wrong thing! It was given of a type: "${typeof o.mergeType}", equal to ${JSON.stringify(o.mergeType,null,4)}`);this.opts=o,this.ranges=[]}add(s,o,r){var u;if(s==null&&o==null)return;if(m(s)&&!m(o)){if(Array.isArray(s)){if(s.length){if(s.some(i=>Array.isArray(i))){s.forEach(i=>{Array.isArray(i)&&this.add(...i)});return}s.length&&c(+s[0])&&c(+s[1])&&this.add(...s)}return}throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_12] the first input argument, "from" is set (${JSON.stringify(s,null,0)}) but second-one, "to" is not (${JSON.stringify(o,null,0)})`)}else if(!m(s)&&m(o))throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_13] the second input argument, "to" is set (${JSON.stringify(o,null,0)}) but first-one, "from" is not (${JSON.stringify(s,null,0)})`);let l=+s,e=+o;if(c(r)&&(r=String(r)),c(l)&&c(e)){if(m(r)&&!f(r)&&!c(r))throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_08] The third argument, the value to add, was given not as string but ${typeof r}, equal to:
${JSON.stringify(r,null,4)}`);if(m(this.ranges)&&Array.isArray(this.last())&&l===this.last()[1]){if(this.last()[1]=e,this.last()[2],this.last()[2]!==null&&m(r)){let i=this.last()[2]&&this.last()[2].length&&(!((u=this.opts)!=null&&u.mergeType)||this.opts.mergeType===1)?`${this.last()[2]}${r}`:r;this.opts.limitToBeAddedWhitespace&&(i=$(i,this.opts.limitLinebreaksCount)),f(i)&&!i.length||(this.last()[2]=i)}}else{this.ranges||(this.ranges=[]);let i=r!==void 0&&!(f(r)&&!r.length)?[l,e,r&&this.opts.limitToBeAddedWhitespace?$(r,this.opts.limitLinebreaksCount):r]:[l,e];this.ranges.push(i)}}else throw c(l)&&l>=0?new TypeError(`ranges-push/Ranges/add(): [THROW_ID_10] "to" value, the second input argument, must be a natural number or zero! Currently it's of a type "${typeof e}" equal to: ${JSON.stringify(e,null,4)}`):new TypeError(`ranges-push/Ranges/add(): [THROW_ID_09] "from" value, the first input argument, must be a natural number or zero! Currently it's of a type "${typeof l}" equal to: ${JSON.stringify(l,null,4)}`)}push(s,o,r){this.add(s,o,r)}current(){return Array.isArray(this.ranges)&&this.ranges.length?(this.ranges=v(this.ranges,{mergeType:this.opts.mergeType}),this.ranges&&this.opts.limitToBeAddedWhitespace?this.ranges.map(s=>m(s[2])?[s[0],s[1],$(s[2],this.opts.limitLinebreaksCount)]:s):this.ranges):null}wipe(){this.ranges=[]}replace(s){if(Array.isArray(s)&&s.length)if(Array.isArray(s[0])&&c(s[0][0]))this.ranges=Array.from(s);else throw new Error(`ranges-push/Ranges/replace(): [THROW_ID_11] Single range was given but we expected array of arrays! The first element, ${JSON.stringify(s[0],null,4)} should be an array and its first element should be an integer, a string index.`);else this.ranges=[]}last(){return Array.isArray(this.ranges)&&this.ranges.length?this.ranges[this.ranges.length-1]:null}};return J(k);})();
/**
 * @name string-collapse-leading-whitespace
 * @fileoverview Collapse the leading and trailing whitespace of a string
 * @version 7.0.4
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/string-collapse-leading-whitespace/}
 */
/**
 * @name codsen-utils
 * @fileoverview Various utility functions
 * @version 1.3.0
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/codsen-utils/}
 */
/**
 * @name ranges-sort
 * @fileoverview Sort string index ranges
 * @version 6.0.6
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/ranges-sort/}
 */
